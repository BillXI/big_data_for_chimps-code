require 'bundler'
Bundler.require(:default)
require_relative '../cluster/lib/rucker'
require_relative '../cluster/lib/rucker/rake_utils'
include Rucker::RakeUtils

Pathname.register_paths({
    cluster_layout: './rucker.yaml'
  })
LAYOUT = Rucker::Layout.load

IMAGE      = ENV['img'] || ENV['image']
TAG        = ENV['tag']
DOCKER_ORG = ENV['DOCKER_ORG'] || 'bd4c'

SHOW_OUTPUT = ENV['SHOW_OUTPUT']

if (ENV['DOCKER_HOST'].blank? && ENV['NO_DOCKER_HOST'].blank?) then warn "You don't seem to have a DOCKER_HOST environment variable set; if you see an error about socks that's why. Boot2docker users should run 'boot2docker up' and follow the instructions given. If your setup is correct, set the environment variable NO_DOCKER_HOST to anything to make this warning go away" ; end

EXTERNAL_IMAGES  = [ 'blalor/docker-hosts', 'phusion/baseimage:0.9.15', 'radial/busyboxplus', 'bd4c/volume_boxer' ]

task :launch_all => [ 'helpers:run', 'sleep', 'data:create', 'sleep', 'hadoop:run' ]

task_args :sleep, :duration do |duration|
  sleep(duration, 1)
end

#
# Tasks on each cluster
#
def cluster_tasks(cl_name)
  namespace cl_name do
    desc "Run the given container, or all in the #{cl_name} cluster with #{cl_name}:run[all]. It must not exist -- see '#{cl_name}:start' and '#{cl_name}:rm'"
    container_task(:run) do |names, opts|
      LAYOUT.cluster(cl_name).run(names || 'all', opts.merge(detach: true))
    end

    desc "Start the given container, or all in the #{cl_name} cluster with #{cl_name}:start[all]. It must previously have been run."
    container_task(:start) do |names, opts|
      LAYOUT.cluster(cl_name).start(names || 'all', opts)
    end

    desc "Stop the given container, or all in the #{cl_name} cluster with #{cl_name}:stop[all]. Errors are ignored."
    container_task(:stop) do |names, opts|
      LAYOUT.cluster(cl_name).stop(names || 'all', opts)
    end

    desc "Remove the given container, or all in the #{cl_name} cluster with #{cl_name}:rm[all]. Errors are ignored."
    container_task(:rm) do |names, opts|
      names = Rucker.expect_some('container', names)
      opts  = opts.reverse_merge(ignore_errors: true)
      LAYOUT.cluster(cl_name).rm(names, opts)
    end
  end
end
cluster_tasks(:hadoop)
cluster_tasks(:helpers)

#
# Utility
#

namespace :data do
  desc "Create the given container, or all in the data cluster with data:create[all]. The containers must not already exist."
  container_task(:create) do |names, opts|
    opts  = opts.reverse_merge(ignore_errors: false)
    LAYOUT.cluster(:data).run(names || 'all', opts)
  end.enhance{ Rake::Task[:ps].invoke }

  desc "Removes the given containers, or all in the data cluster with data:delete_data[all]"
  container_task(:delete_data) do |names, opts|
    names = Rucker.expect_some('container', names)
    opts  = opts.reverse_merge(ignore_errors: true)
    LAYOUT.cluster(:data).rm(names, opts)
  end.enhance{ Rake::Task[:ps].invoke }

  task :inspector do
    inspector = Rucker::Container.new(:data_inspector, 'bd4c/hadoop_base',
      volume_from: LAYOUT.cluster(:data).container_names,
      entrypoint: '/bin/bash')
    inspector.run(interactive: true)
  end

  container_task :archive do |name|
    containers = LAYOUT.cluster(:data).containers_slice(names || 'all')
    containers.each do |ctr|
      Rucker.banner()
      ctr.start(opts, interactive: true)
      Rucker.banner
    end
  end
end


namespace :images do
  desc "Pull all images from the docker hub. Takes a while. Supply a TAG=name env var to get only corresponding bd4c images"
  task :pull do
    our_images = LAYOUT.image_names.map{|img_name| tagged_image(img_name) }
    (EXTERNAL_IMAGES + our_images).each do |img_name|
      Rucker.banner("Pull #{img_name} -- this can take a stupidly long time")
      sh("docker pull #{img_name}")
    end
  end

  desc "Tag all images with the given tag. Specify an image name, or 'all' for all"
  task :tag, :name, :image do |tt, opts|
    tag_name   = Rucker.expect_one('tag', opts[:name])
    image_name = Rucker.expect_some('image', opts[:image])
    images = (image_name == 'all' ? LAYOUT.image_names : [images])
    images.each do |img_name|
      sh "docker tag #{img_name} #{img_name}:#{tag}"
    end
  end

  task :push do
    tag = Rucker.expect_one(:tag, TAG || 'latest')
    puts "Pushing imags prefixed with $DOCKER_ORG=#{DOCKER_ORG} -- this can take a stupidly long time, and you have to be part of the #{DOCKER_ORG} org for it to work."
    LAYOUT.image_names.each do |img_name|
      next unless img_name =~ %r{#{DOCKER_ORG}/}
      img_name = "#{img_name}:#{tag}"
      Rucker.banner("Push #{img_name} -- this can take a stupidly long time")
      sh("docker push #{img_name}")
    end
  end
end


#
# Utility tasks
#

desc "Show the status of all running and stopped containers"
task :ps do
  sh "docker ps -a"
end

desc "Uses boot2docker to find the disk free space of the docker host. Do a `rake docker:rmi_blank` if you don't like what you see."
task :df do
  sh "boot2docker ssh df -m /mnt/sda1"
end

namespace :docker do
  # task :build do
  #   HADOOP_IMAGES.each do |img_name|
  #     banner("Building #{img_name}")
  #     sh("decking build #{img_name}")
  #   end
  # end

  def tagged_image(name)
    (TAG.present? ? "#{name}:#{TAG}" : name)
  end

  task :rm_stopped do
    args = `docker ps -a  | egrep -v ' Up |CONTAINER ID' | cut -c 1-12`.gsub(/[\r\n]/, " ")
    if args.empty?
      puts "No stopped containers to kill"
    else
      sh "docker rm #{args} ; true"
    end
  end

  task :rmi_blank do
    sh "docker rmi $(docker images | grep '^<none>' | awk '{print $3}') ; true"
  end

  task :images do
    lines = `docker images --no-trunc`.split(/[\r\n]+/).drop(1)
    images = lines.each_with_index.map{|line, idx| Rucker::Image.from_listing(line, idx) }
    images.sort_by(&:name).each{|image| puts image.to_s }
  end

  task :history do
    Rucker.expect_one('image', IMAGE)
    lines = `docker history --no-trunc #{IMAGE}`.split(/[\r\n]+/).drop(1)
    images = lines.each_with_index.map{|line, idx| Rucker::Image.from_history(line, idx) }
    images.sort_by(&:name).each{|image| puts image.to_s }
  end


  def forward_ports(ports)
    ports.each do |port, name|
      name ||= "tcp-port#{port}"
      sh "VBoxManage modifyvm boot2docker-vm --natpf1 '#{name},tcp,,#{port},,#{port}' ; true"
      sh "VBoxManage modifyvm boot2docker-vm --natpf1 '#{name},udp,,#{port},,#{port}' ; true"
    end
  end

  task :open_ports do
    forward_ports(HADOOP_PORTS)
    forward_ports(SSH_PORTS)
    forward_ports(OTHER_PORTS)
  end
end

# The hadoop ports that might potentially be interesting
HADOOP_PORTS = {
  8042 => 'nm-console', 50075 => 'dn-console', 8010 => 'dn-jmx',
  8888 => 'hue', 8088 => 'rm-console', 19888 => 'hist-server', 50070 => 'nn-console' }
# open ssh ports at 9022, 9122, 9222, etc
SSH_PORTS = {
  9022 => 'foyer-ssh', 9122 => 'worker-ssh', 9222 => 'hue-ssh', 9322 => 'rm-ssh', 9422 => 'nn-ssh',
  9522 => 'snn-ssh',
  10022 => 'deb-proxy-ssh', }
OTHER_PORTS  = {
  10000 => 'deb-proxy',
  9622 => 'extra-ssh', 9722 => 'extra-ssh', 9822 => 'extra-ssh', 10122 => 'extra-ssh', 10222 => 'extra-ssh',  }
