
HUMAN_TO_BYTES = { 'GB' => 2**30, 'MB' => 2**20, 'kB' => 2**10, 'B' => 1 }
def human_to_bytes(num, units)
  raise "Can't dehumanize #{[num, units].inspect}" if not HUMAN_TO_BYTES.include?(units)
  num.to_i * HUMAN_TO_BYTES[units]
end

class DockerImage
  # feae5a29ea12        About an hour ago   /bin/sh -c #(nop) COPY file:bb5fb02a76c6852b8   2.091 kB
  HISTORY_RE = /^([0-9a-f]+)\s+(.*?ago)\s+(.*?)\s+([0-9\.]+) (B|kB|MB|GB)$/
  # bd4c/baseimage       latest              db0ad19d8544        58 seconds ago      713.7 MB
  LISTING_RE = /^([\w\/\-<>]+)\s+([\w\/\-\.<>]+)\s+([0-9a-f]+)\s+(.*?ago)\s+([0-9\.]+) (B|kB|MB|GB)$/
  #
  PRINTF_FORMAT = %w[%3d %-23s %-15s %10d %7s\ %2s %12s %-23s %s].join("\t")

  attr_accessor :id, :name, :tag, :sz_num, :sz_units, :ago, :cmd, :idx

  def initialize(id, name, tag, sz_num, sz_units, ago, cmd, idx=0)
    @id, @name, @tag, @sz_num, @sz_units, @ago, @cmd, @idx = [id, name, tag, sz_num, sz_units, ago, cmd, idx]
  end

  # name, tag, image id, created, virtual size
  def self.from_listing(str, idx = 0)
    name, tag, id, ago, sz_num, sz_units = str.chomp.match(LISTING_RE).captures rescue nil
    return unless sz_units
    new(id, name, tag, sz_num, sz_units, ago, '-', idx)
  end

  # image, created, command, size
  def self.from_history(str, idx = 0)
    id, ago, cmd, sz_num, sz_units = str.chomp.match(HISTORY_RE).captures rescue nil
    return unless sz_units
    new(id, '~', '~', sz_num, sz_units, ago, cmd, idx)
  end

  def short_id()   id[0..12] ; end
  def short_cmd()  cmd[0..100] ; end
  def size()       human_to_bytes(sz_num, sz_units) ; end

  def to_s
    PRINTF_FORMAT % [idx, name, tag, size, sz_num, sz_units, short_id, ago, short_cmd]
  end
end

namespace :docker do
  task :rm_stopped do
    args = `docker ps -a  | egrep -v ' Up |CONTAINER ID' | cut -c 1-12`.gsub(/[\r\n]/, " ")
    if args.empty?
      puts "No stopped containers to kill"
    else
      sh "docker rm #{args} ; true"
    end
  end

  task :rmi_all do
    sh "docker rmi $(docker images | grep '^<none>' | awk '{print $3}') ; true"
  end

  task :df do
    sh "boot2docker ssh df -m /mnt/sda1"
  end

  task :ps do
    sh "docker ps -a"
  end

  task :images do
    lines = `docker images --no-trunc`.split(/[\r\n]+/).drop(1)
    images = lines.each_with_index.map{|line, idx| DockerImage.from_listing(line, idx) }
    images.sort_by(&:name).each{|image| puts image.to_s }
  end

  task :history do
    # feae5a29ea12 hb pre ; b52ff881a5fd bi pre db0ad19d8544
    lines = `docker history --no-trunc bd4c/hadoop_base`.split(/[\r\n]+/).drop(1)
    images = lines.each_with_index.map{|line, idx| DockerImage.from_history(line, idx) }
    images.sort_by(&:name).each{|image| puts image.to_s }
  end
end
